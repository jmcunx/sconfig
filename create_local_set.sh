#!/bin/sh
#
# create_local_set.sh
#
# >>>>> WHEN CHANGED COPY TO
#      /opt/jmc/bin
#      and execute on startup
#
# Generate a system specific script for
# local global environment variables
#

#------------------------------------------------------------------------------
# f_add_a_path() -- add a specific path
#------------------------------------------------------------------------------
f_add_a_path()
{
    l_app_home="$1"
    l_aap_dir="$2"

    if test ! -d "$l_aap_dir" -a "$l_app_home" = "N"
    then
	return
    fi
    if test "$PATH" = ""
    then
	return
    fi

cat <<EOF >> "$g_cust_sh"
    echo "\$PATH" | grep "$l_aap_dir" > /dev/null 2>&1
    if test "\$?" -ne "0"
    then
        PATH=\$PATH:$l_aap_dir
        export PATH
    fi
EOF

cat <<EOF >> "$g_cust_csh"
    echo "\$path" | grep "$l_aap_dir" >& /dev/null
    if ( ! "\$?" == "0" ) then
        set path = ( \$path $l_aap_dir )
    endif
EOF

} # END: f_add_a_path()
#------------------------------------------------------------------------------
# f_add_paths() -- add additional paths
#------------------------------------------------------------------------------
f_add_paths()
{
    f_add_a_path "N" "/usr/local/bin"
    f_add_a_path "N" "/opt/jmc/git/bin"
    f_add_a_path "N" "/opt/jmc/bin"
    f_add_a_path "N" "/usr/local/games"
    f_add_a_path "Y" "\$HOME/bin"

} # END: f_add_paths()

#------------------------------------------------------------------------------
# f_slack() -- slackware specific
#------------------------------------------------------------------------------
f_slack()
{
    l_slack_sm=""
    l_slack_domain="unknown"
    l_slack_hostname=`uname -n`
    l_slack_major=""
    l_slack_minor=""

    if test -f /etc/HOSTNAME
    then
	l_slack_hostname=`cat /etc/HOSTNAME`
	l_slack_domain=`echo $l_slack_hostname | sed 's/\./%/' | awk 'BEGIN{FS="%"}{printf("%s",$2)}'`
    fi
    if test "/tmp/\$USER"
    then
	TMPDIR="/tmp/\$USER"
    else
	TMPDIR="/tmp"
    fi
cat <<EOF >> "$g_cust_sh"
    OS=$OS
    HOST=$HOST
    HOSTNAME=$l_slack_hostname
    DOMAIN=$l_slack_domain
    export OS HOST HOSTNAME DOMAIN
    TMPDIR=$TMPDIR
    TMP=$TMPDIR
    TEMPDIR=$TMPDIR
    TEMP=$TMPDIR
    TMUX_TMPDIR=$TMPDIR
    RAMDISK=$TMPDIR
    export TMPDIR TMP TEMPDIR TEMP TMUX_TMPDIR RAMDISK
EOF
cat <<EOF >> "$g_cust_csh"
    setenv OS               $OS
    setenv HOST             $HOST
    setenv HOSTNAME         $l_slack_hostname
    setenv DOMAIN           $l_slack_domain
    setenv TMPDIR           $TMPDIR
    setenv TMP              $TMPDIR
    setenv TEMPDIR          $TMPDIR
    setenv TEMP             $TMPDIR
    setenv TMUX_TMPDIR      $TMPDIR
    setenv RAMDISK          $TMPDIR
EOF

    if test "$g_found_os" != "Y"
    then
	return
    fi

    l_slack_major=`echo "$VERSION_ID" | awk 'BEGIN{FS="."}{print $1}'`
    l_slack_minor=`echo "$VERSION_ID" | sed 's/\.//' | awk 'BEGIN{FS=""}{print $2}'`

cat <<EOF >> "$g_cust_sh"
    SLACK_VER=$VERSION_ID
    SLACK_MAJOR=$l_slack_major
    SLACK_MINOR=$l_slack_minor
    DISTRO=$ID
    export SLACK_VER SLACK_MAJOR SLACK_MINOR DISTRO
EOF
cat <<EOF >> "$g_cust_csh"
    setenv SLACK_VER        $VERSION_ID
    setenv SLACK_MAJOR      $l_slack_major
    setenv SLACK_MINOR      $l_slack_minor
    setenv DISTRO           $ID
EOF

} # f_slack()

#------------------------------------------------------------------------------
# f_other() -- other distros
#------------------------------------------------------------------------------
f_other()
{
    if test -f /etc/HOSTNAME
    then
	l_oth_hostname=`cat /etc/HOSTNAME`
	l_oth_domain=`echo $hostname | sed 's/\./%/' | awk 'BEGIN{FS="%"}{printf("%s",$2)}'`
    else
	l_oth_hostname=`uname -n`
	if test -f /etc/resolv.conf
	then
	    l_oth_domain=`grep '^search' < /etc/resolv.conf | awk '{printf("%s",$NF)}' | sed 's/^search//;s/ //g'`
	else
	    l_oth_domain="unknown"
	fi
    fi

cat <<EOF >> "$g_cust_sh"
    VERSION=$VERSION_ID
    OS=$OS
    HOST=$HOST
    HOSTNAME=$HOST.$l_oth_domain
    DOMAIN=$l_oth_domain
    DISTRO=$ID
    export OS HOST HOSTNAME DOMAIN
EOF
cat <<EOF >> "$g_cust_csh"
    setenv VERSION $VERSION_ID
    setenv OS $OS
    setenv HOST $HOST
    setenv HOSTNAME $HOST.$l_oth_domain
    setenv DOMAIN $l_oth_domain
    setenv DISTRO $ID
EOF

} # f_other()

#------------------------------------------------------------------------------
# f_build_hdr()
#------------------------------------------------------------------------------
f_build_hdr()
{
cat <<EOF > "$g_cust_sh"
#!/bin/sh
#
# Generated by  $g_sname
# on `date`
#
EOF
cat <<EOF > "$g_cust_csh"
#!/bin/csh
# Generated by  $g_sname
# on `date`
#
EOF

    if test "$g_found_os" = "Y"
    then
	return
    fi

cat <<EOF > "$g_cust_sh"
# WARNING W01: /etc/os-release missing
# cannot determine some settings
#
EOF

cat <<EOF > "$g_cust_csh"
# WARNING W01: /etc/os-release missing
# cannot determine some settings
#
EOF

} # END: f_build_hdr()

#------------------------------------------------------------------------------
# f_build_rhel() -- specific to redhat type systems
#                    LC_ALL is set for RedHat type systems due to
#                    fix a sort issue these type of systems have
#------------------------------------------------------------------------------
f_build_rhel()
{
    if test ! -f /etc/redhat-release
    then
	return
    fi

cat <<EOF >> "$g_cust_sh"
    LC_ALL=POSIX
    export LC_ALL
EOF
cat <<EOF >> "$g_cust_csh"
    setenv LC_ALL POSIX
EOF

} # END: f_build_rhel()

#------------------------------------------------------------------------------
# f_build_specific() -- HOST Specific Data
#------------------------------------------------------------------------------
f_build_specific()
{

    l_spec_sudoaccess="$1"
    l_spec_work="$2"
    l_spec_laptop="$3"

cat << EOF >> "$g_cust_sh"
    SUDOACCESS="$l_spec_sudoaccess"
    WORK_WORKSTATION="$l_spec_work"
    IS_LAPTOP="$l_spec_laptop"
    export SUDOACCESS IS_LAPTOP WORK_WORKSTATION
EOF
cat << EOF >> "$g_cust_csh"
    setenv SUDOACCESS       $l_spec_sudoaccess
    setenv WORK_WORKSTATION $l_spec_work
    setenv IS_LAPTOP        $l_spec_laptop
EOF

} # END: f_build_specific()

#------------------------------------------------------------------------------
# f_build()
#------------------------------------------------------------------------------
f_build()
{
    f_build_hdr

    #--- Ensure root does not see this
    echo 'if test ! "`id -u`" = "0"'        >> "$g_cust_sh"
    echo 'then'                             >> "$g_cust_sh"
    echo 'if ( ! "`id -u`" == "0" ) then'   >> "$g_cust_csh"

    #--- distro dependent
    if test -f /etc/slackware-version
    then
	f_slack
    else
        f_build_rhel
	f_other
    fi

    #--- HOST specific entries
    #    Columns:  "have sudo acces" "WORK DEVICE" "Is a Laptop"
    case "$HOST" in
	"jmclin0")
	    f_build_specific "YES" "NO" "N"
	    ;;
	"jmclin1")
	    f_build_specific "YES" "NO" "Y"
	    ;;
	"magnetar")
	    f_build_specific "YES" "NO" "Y"
	    ;;
	*)
	    f_build_specific "NO"  "YES" "Y"
	    ;;
    esac

    #--- add custom PATHs
    f_add_paths

    #--- Ensure root does not see this
    echo 'fi'        >> "$g_cust_sh"
    echo 'endif'     >> "$g_cust_csh"

} # END: f_build()

###############################################################################
# generate server specific "includes"
###############################################################################
g_sname="$0"
g_found_os="N"
g_cust_sh=""
g_cust_csh=""
g_pdir="/etc/profile.d"

if test "$OS" = ""
then
    OS=`uname -s`
    export OS
fi
if test "$HOST" = ""
then
    HOST=`uname -n | awk 'BEGIN{FS="."}{print $1}'`
    export HOST
fi
if test "$USER" = ""
then
    USER="`id -un`"
    export USER
fi

if test "$USER" != "root"  ### For testing
then
    g_pdir="$HOME"
fi

if test -f /etc/os-release
then
    . /etc/os-release
    g_found_os="Y"
fi

g_cust_sh=$g_pdir/jmccue-custom.sh
g_cust_csh=$g_pdir/jmccue-custom.csh

if test -f "$g_cust_sh"
then
    rm "$g_cust_sh"
fi
if test -f "$g_cust_csh"
then
    rm "$g_cust_csh"
fi

#------------------------------------------------------------------------------
# Generate the actual files, only for Linux
#------------------------------------------------------------------------------
if test "$OS" = "Linux"
then
    f_build
fi

#------------------------------------------------------------------------------
# done -- do NOT have a exit statement
#------------------------------------------------------------------------------
if test -f "$g_cust_sh"
then
    chmod 755 "$g_cust_sh"
fi
if test -f "$g_cust_csh"
then
    chmod 755 "$g_cust_csh"
fi

###### END
